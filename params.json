{"name":"Literate","tagline":"A literate programming tool.","body":"## literate\r\n\r\n`literate` is a Go command line tool for generating readable program\r\nlistings.  It was inspired by Luke Gorries' post \r\n[\"Readable Programs\"](http://blog.lukego.com/blog/2012/10/24/readable-programs/)\r\nand, in particular, his `pbook` example. It works by treating all text that have\r\na line comment as Markdown text, and putting code in code blocks.\r\n\r\nListings that are written to a file are written as &lt;file.go>.&lt;format>; for\r\nexample, producing listings for `listing.go`:\r\n\r\n* markdown -> `listing.go.md`\r\n* HTML -> `listing.go.html`\r\n* PDF -> `listing.go.pdf`\r\n\r\nMultiple languages are supported; for the list, pass the `-l help`\r\nflag to `literate`. `literate` is a simple tool that only recognises line\r\ncomments right now; you can tell it what a line comment starts with and\r\nit will use that.\r\n\r\n### Examples\r\n\r\n* To produce an HTML listing for `listing.go`:\r\n\r\n        literate -o html listing.go\r\n\r\n  This will produce `listing.go.html`, which is a standalone page. The\r\n  template for this page is contained in the `html.go` source file, and\r\n  is taken from [my site tyrfingr](http://tyrfingr.is).\r\n\r\n* To produce a PDF listing for `pandoc.go`:\r\n\r\n        literate -o pdf pandoc.go\r\n\r\n  Similar to the previous example, this will produce the PDF file\r\n  `pandoc.go.pdf`.\r\n\r\n* To produce a markdown listing for `html.go` and have this printed\r\n  to standard output:\r\n\r\n        literate html.go\r\n\r\n  Or, alternatively,\r\n\r\n        literate -o - html.go\r\n\r\n* You can produce listings for multiple files at the same time:\r\n\r\n        literate -o pdf *.go\r\n\r\n  If you ran this on the `literate` directory, you would have `listing.go.pdf`,\r\n  `html.go.pdf`, `pandoc.go.pdf`, and `texout.go.pdf`.\r\n\r\n### Supported Output Formats\r\n\r\nStandalone listings are generated; the following formats (selected with\r\nthe `-o` flag) are supported:\r\n\r\n* html - generate HTML listing\r\n* latex - uses [pandoc](http://www.johnmacfarlane.net/pandoc/) to convert the\r\n  markdown to a LaTeX listing.\r\n* md - generate markdown listing\r\n* pdf - uses [pandoc](http://www.johnmacfarlane.net/pandoc/) to convert the\r\n  markdown to a PDF listing.\r\n* tex - rudimentary pure-Go TeX listing.\r\n\r\n### Dependencies\r\n\r\n* `literate` uses [`blackfriday`](https://github.com/russross/blackfriday)\r\nfor producing HTML from the listing. This will automatically be pulled in\r\nby `go get`.\r\n\r\n* `pandoc` is required for conversion to PDF.\r\n\r\n### Why?\r\n\r\nUltimately, I wanted a way to take notes while reading a book and have\r\na way to extract better-looking notes from a source file while still\r\nretaining the ability to run the files. This program does (pretty much)\r\njust what I want it to, although block comments would be nice. Originally,\r\nI had [golst](https://github.com/gokyle/golst), but wanted to be able\r\nto use it with Lisp and Haskell.\r\n\r\n### License\r\n\r\n`literate` is released under an ISC license. For details, see\r\n[LICENSE](./LICENSE) in the source repository.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}